{"version":3,"sources":["MultiMap.js"],"names":["create","Object","MultiMap","keys","values","name","value","toLowerCase","push","size","map","key","names","length","JSON","stringify","obj","i","set"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;AAGA,KAAIA,SAASC,OAAOD,MAApB;;AAEA;;;;;;KAKME,Q;;;AACL,sBAAc;AAAA;;AAAA;;AAEb,SAAKC,IAAL,GAAYH,OAAO,IAAP,CAAZ;AACA,SAAKI,MAAL,GAAcJ,OAAO,IAAP,CAAd;AAHa;AAIb;;AAED;;;;;;;;;;uBAMIK,I,EAAMC,K,EAAO;AAChB,SAAKH,IAAL,CAAUE,KAAKE,WAAL,EAAV,IAAgCF,IAAhC;AACA,SAAKD,MAAL,CAAYC,KAAKE,WAAL,EAAZ,IAAkC,KAAKH,MAAL,CAAYC,KAAKE,WAAL,EAAZ,KAAmC,EAArE;AACA,SAAKH,MAAL,CAAYC,KAAKE,WAAL,EAAZ,EAAgCC,IAAhC,CAAqCF,KAArC;AACA,WAAO,IAAP;AACA;;;2BAMO;AACP,SAAKH,IAAL,GAAYH,OAAO,IAAP,CAAZ;AACA,SAAKI,MAAL,GAAcJ,OAAO,IAAP,CAAd;AACA,WAAO,IAAP;AACA;;;4BAQQK,I,EAAM;AACd,WAAOA,KAAKE,WAAL,MAAsB,KAAKH,MAAlC;AACA;;;qCAKiB;AACjB,SAAKA,MAAL,GAAc,IAAd;AACA;;;uBAsBGC,I,EAAM;AACT,QAAID,SAAS,KAAKA,MAAL,CAAYC,KAAKE,WAAL,EAAZ,CAAb;AACA,QAAIH,MAAJ,EAAY;AACX,YAAOA,OAAO,CAAP,CAAP;AACA;AACD;;;0BAOMC,I,EAAM;AACZ,WAAO,KAAKD,MAAL,CAAYC,KAAKE,WAAL,EAAZ,CAAP;AACA;;;6BAMS;AACT,WAAO,KAAKE,IAAL,OAAgB,CAAvB;AACA;;;2BAMO;AAAA;;AACP,WAAOR,OAAOE,IAAP,CAAY,KAAKC,MAAjB,EAAyBM,GAAzB,CAA6B,UAACC,GAAD;AAAA,YAAS,OAAKR,IAAL,CAAUQ,GAAV,CAAT;AAAA,KAA7B,CAAP;AACA;;;0BAOMN,I,EAAM;AACZ,WAAO,KAAKF,IAAL,CAAUE,KAAKE,WAAL,EAAV,CAAP;AACA,WAAO,KAAKH,MAAL,CAAYC,KAAKE,WAAL,EAAZ,CAAP;AACA,WAAO,IAAP;AACA;;;uBASGF,I,EAAMC,K,EAAO;AAChB,SAAKH,IAAL,CAAUE,KAAKE,WAAL,EAAV,IAAgCF,IAAhC;AACA,SAAKD,MAAL,CAAYC,KAAKE,WAAL,EAAZ,IAAkC,CAACD,KAAD,CAAlC;AACA,WAAO,IAAP;AACA;;;0BAMM;AACN,WAAO,KAAKM,KAAL,GAAaC,MAApB;AACA;;;8BAMU;AACV,WAAOC,KAAKC,SAAL,CAAe,KAAKX,MAApB,CAAP;AACA;;;8BArFiBY,G,EAAK;AACtB,QAAIN,MAAM,IAAIR,QAAJ,EAAV;AACA,QAAIC,OAAOF,OAAOE,IAAP,CAAYa,GAAZ,CAAX;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAId,KAAKU,MAAzB,EAAiCI,GAAjC,EAAsC;AACrCP,SAAIQ,GAAJ,CAAQf,KAAKc,CAAL,CAAR,EAAiBD,IAAIb,KAAKc,CAAL,CAAJ,CAAjB;AACA;AACD,WAAOP,GAAP;AACA;;;;;;mBAiFaR,Q","file":"node_modules/metal-structs/src/MultiMap.js","sourcesContent":["'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * A cached reference to the create function.\n */\nvar create = Object.create;\n\n/**\n * Case insensitive string Multimap implementation. Allows multiple values for\n * the same key name.\n * @extends {Disposable}\n */\nclass MultiMap extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.keys = create(null);\n\t\tthis.values = create(null);\n\t}\n\n\t/**\n\t * Adds value to a key name.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tadd(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = this.values[name.toLowerCase()] || [];\n\t\tthis.values[name.toLowerCase()].push(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears map names and values.\n\t * @chainable\n\t */\n\tclear() {\n\t\tthis.keys = create(null);\n\t\tthis.values = create(null);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if map contains a value to the key name.\n\t * @param {string} name\n\t * @return {boolean}\n\t * @chainable\n\t */\n\tcontains(name) {\n\t\treturn name.toLowerCase() in this.values;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.values = null;\n\t}\n\n\t/**\n\t * Creates a `MultiMap` instance from the given object.\n\t * @param {!Object} obj\n\t * @return {!MultiMap}\n\t */\n\tstatic fromObject(obj) {\n\t\tvar map = new MultiMap();\n\t\tvar keys = Object.keys(obj);\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tmap.set(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**\n\t * Gets the first added value from a key name.\n\t * @param {string} name\n\t * @return {*}\n\t * @chainable\n\t */\n\tget(name) {\n\t\tvar values = this.values[name.toLowerCase()];\n\t\tif (values) {\n\t\t\treturn values[0];\n\t\t}\n\t}\n\n\t/**\n\t * Gets all values from a key name.\n\t * @param {string} name\n\t * @return {Array.<*>}\n\t */\n\tgetAll(name) {\n\t\treturn this.values[name.toLowerCase()];\n\t}\n\n\t/**\n\t * Returns true if the map is empty, false otherwise.\n\t * @return {boolean}\n\t */\n\tisEmpty() {\n\t\treturn this.size() === 0;\n\t}\n\n\t/**\n\t * Gets array of key names.\n\t * @return {Array.<string>}\n\t */\n\tnames() {\n\t\treturn Object.keys(this.values).map((key) => this.keys[key]);\n\t}\n\n\t/**\n\t * Removes all values from a key name.\n\t * @param {string} name\n\t * @chainable\n\t */\n\tremove(name) {\n\t\tdelete this.keys[name.toLowerCase()];\n\t\tdelete this.values[name.toLowerCase()];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of a key name. Relevant to replace the current values with\n\t * a new one.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tset(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = [value];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the size of the map key names.\n\t * @return {number}\n\t */\n\tsize() {\n\t\treturn this.names().length;\n\t}\n\n\t/**\n\t * Returns the parsed values as a string.\n\t * @return {string}\n\t */\n\ttoString() {\n\t\treturn JSON.stringify(this.values);\n\t}\n}\n\nexport default MultiMap;\n"],"sourceRoot":"/source/"}