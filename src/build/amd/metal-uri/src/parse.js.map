{"version":3,"sources":["parse.js"],"names":["parse","opt_uri","URL","length","url","port","href","indexOf","TypeError"],"mappings":";AAAA;;;;;;;;;;;;;;AAKA;;;;;AAKA,UAASA,KAAT,CAAeC,OAAf,EAAwB;AACvB,MAAI,uBAAWC,GAAX,KAAmBA,IAAIC,MAA3B,EAAmC;AAClC,OAAMC,MAAM,IAAIF,GAAJ,CAAQD,OAAR,CAAZ;;AAEA;AACA;AACA;AACA,OAAIG,IAAIC,IAAJ,IAAYD,IAAIE,IAAJ,CAASC,OAAT,CAAiBH,IAAIC,IAArB,MAA+B,CAAC,CAAhD,EAAmD;AAClD,UAAM,IAAIG,SAAJ,CAAiBP,OAAjB,yBAAN;AACA;;AAED,UAAOG,GAAP;AACA,GAXD,MAWO;AACN,UAAO,+BAAgBH,OAAhB,CAAP;AACA;AACD;;mBAEcD,K","file":"node_modules/metal-uri/src/parse.js","sourcesContent":["'use strict';\n\nimport { isFunction } from 'metal';\nimport parseFromAnchor from './parseFromAnchor';\n\n/**\n * Parses the given uri string into an object. The URL function will be used\n * when present, otherwise we'll fall back to the anchor node element.\n * @param {*=} opt_uri Optional string URI to parse\n */\nfunction parse(opt_uri) {\n\tif (isFunction(URL) && URL.length) {\n\t\tconst url = new URL(opt_uri);\n\n\t\t// Safari Browsers will cap port to the max 16-bit unsigned integer (65535) instead\n\t\t// of throwing a TypeError as per spec. It will still keep the port number in the\n\t\t// href attribute, so we can use this mismatch to raise the expected exception.\n\t\tif (url.port && url.href.indexOf(url.port) === -1) {\n\t\t\tthrow new TypeError(`${opt_uri} is not a valid URL`);\n\t\t}\n\n\t\treturn url;\n\t} else {\n\t\treturn parseFromAnchor(opt_uri);\n\t}\n}\n\nexport default parse;\n"],"sourceRoot":"/source/"}