{"version":3,"sources":["Uri.js"],"names":["parseFn_","Uri","opt_uri","url","parse","maybeAddProtocolAndHostname_","multimap","names","forEach","name","getAll","value","addParameterValue","ensureQueryInitialized_","String","query","add","values","search","substring","split","param","key","urlDecode","hash","host","getHostname","port","getPort","hostname","HOSTNAME_PLACEHOLDER","getHost","getProtocol","get","pathname","protocol","querystring","getParameterNames","getParameterValues","encodeURIComponent","slice","contains","setParameterValue","RANDOM_PARAM","getRandomString","indexOf","DEFAULT_PROTOCOL","charAt","remove","removeParameter","length","href","getPathname","getSearch","getHash","parseFn","basePath","paths","map","path","concat","join","replace","str","decodeURIComponent","isSecure","window","location","Date","now"],"mappings":"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","file":"node_modules/metal-uri/src/Uri.js","sourcesContent":["'use strict';\n\nimport { isDef, string } from 'metal';\nimport parse from './parse';\nimport { MultiMap } from 'metal-structs';\n\nvar parseFn_ = parse;\n\nclass Uri {\n\n\t/**\n\t * This class contains setters and getters for the parts of the URI.\n\t * The following figure displays an example URIs and their component parts.\n\t *\n\t *                                  path\n\t *\t                             ┌───┴────┐\n\t *\t  abc://example.com:123/path/data?key=value#fragid1\n\t *\t  └┬┘   └────┬────┘ └┬┘           └───┬───┘ └──┬──┘\n\t * protocol  hostname  port            search    hash\n\t *          └──────┬───────┘\n\t *                host\n\t *\n\t * @param {*=} opt_uri Optional string URI to parse\n\t * @constructor\n\t */\n\tconstructor(opt_uri = '') {\n\t\tthis.url = Uri.parse(this.maybeAddProtocolAndHostname_(opt_uri));\n\t}\n\n\t/**\n\t * Adds parameters to uri from a <code>MultiMap</code> as source.\n\t * @param {MultiMap} multimap The <code>MultiMap</code> containing the\n\t *   parameters.\n\t * @protected\n\t * @chainable\n\t */\n\taddParametersFromMultiMap(multimap) {\n\t\tmultimap.names().forEach((name) => {\n\t\t\tmultimap.getAll(name).forEach((value) => {\n\t\t\t\tthis.addParameterValue(name, value);\n\t\t\t});\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the value of the named query parameters.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value. Will be explicitly casted to String.\n\t * @chainable\n\t */\n\taddParameterValue(name, value) {\n\t\tthis.ensureQueryInitialized_();\n\t\tif (isDef(value)) {\n\t\t\tvalue = String(value);\n\t\t}\n\t\tthis.query.add(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the values of the named query parameter.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\taddParameterValues(name, values) {\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Ensures query internal map is initialized and synced with initial value\n\t * extracted from URI search part.\n\t * @protected\n\t */\n\tensureQueryInitialized_() {\n\t\tif (this.query) {\n\t\t\treturn;\n\t\t}\n\t\tthis.query = new MultiMap();\n\t\tvar search = this.url.search;\n\t\tif (search) {\n\t\t\tsearch.substring(1).split('&').forEach((param) => {\n\t\t\t\tvar [key, value] = param.split('=');\n\t\t\t\tif (isDef(value)) {\n\t\t\t\t\tvalue = Uri.urlDecode(value);\n\t\t\t\t}\n\t\t\t\tthis.addParameterValue(key, value);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Gets the hash part of uri.\n\t * @return {string}\n\t */\n\tgetHash() {\n\t\treturn this.url.hash || '';\n\t}\n\n\t/**\n\t * Gets the host part of uri. E.g. <code>[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetHost() {\n\t\tvar host = this.getHostname();\n\t\tif (host) {\n\t\t\tvar port = this.getPort();\n\t\t\tif (port && port !== '80') {\n\t\t\t\thost += ':' + port;\n\t\t\t}\n\t\t}\n\t\treturn host;\n\t}\n\n\t/**\n\t * Gets the hostname part of uri without protocol and port.\n\t * @return {string}\n\t */\n\tgetHostname() {\n\t\tvar hostname = this.url.hostname;\n\t\tif (hostname === Uri.HOSTNAME_PLACEHOLDER) {\n\t\t\treturn '';\n\t\t}\n\t\treturn hostname;\n\t}\n\n\t/**\n\t * Gets the origin part of uri. E.g. <code>http://[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetOrigin() {\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\treturn this.getProtocol() + '//' + host;\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Returns the first value for a given parameter or undefined if the given\n\t * parameter name does not appear in the query string.\n\t * @param {string} paramName Unescaped parameter name.\n\t * @return {string|undefined} The first value for a given parameter or\n\t *   undefined if the given parameter name does not appear in the query\n\t *   string.\n\t */\n\tgetParameterValue(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.get(name);\n\t}\n\n\t/**\n\t * Returns the value<b>s</b> for a given parameter as a list of decoded\n\t * query parameter values.\n\t * @param {string} name The parameter to get values for.\n\t * @return {!Array<?>} The values for a given parameter as a list of decoded\n\t *   query parameter values.\n\t */\n\tgetParameterValues(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.getAll(name);\n\t}\n\n\t/**\n\t * Returns the name<b>s</b> of the parameters.\n\t * @return {!Array<string>} The names for the parameters as a list of\n\t *   strings.\n\t */\n\tgetParameterNames() {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.names();\n\t}\n\n\t/**\n\t * Gets the function currently being used to parse URIs.\n\t * @return {!function()}\n\t */\n\tstatic getParseFn() {\n\t\treturn parseFn_;\n\t}\n\n\t/**\n\t * Gets the pathname part of uri.\n\t * @return {string}\n\t */\n\tgetPathname() {\n\t\treturn this.url.pathname;\n\t}\n\n\t/**\n\t * Gets the port number part of uri as string.\n\t * @return {string}\n\t */\n\tgetPort() {\n\t\treturn this.url.port;\n\t}\n\n\t/**\n\t * Gets the protocol part of uri. E.g. <code>http:</code>.\n\t * @return {string}\n\t */\n\tgetProtocol() {\n\t\treturn this.url.protocol;\n\t}\n\n\t/**\n\t * Gets the search part of uri. Search value is retrieved from query\n\t * parameters.\n\t * @return {string}\n\t */\n\tgetSearch() {\n\t\tvar search = '';\n\t\tvar querystring = '';\n\t\tthis.getParameterNames().forEach((name) => {\n\t\t\tthis.getParameterValues(name).forEach((value) => {\n\t\t\t\tquerystring += name;\n\t\t\t\tif (isDef(value)) {\n\t\t\t\t\tquerystring += '=' + encodeURIComponent(value);\n\t\t\t\t}\n\t\t\t\tquerystring += '&';\n\t\t\t});\n\t\t});\n\t\tquerystring = querystring.slice(0, -1);\n\t\tif (querystring) {\n\t\t\tsearch += '?' + querystring;\n\t\t}\n\t\treturn search;\n\t}\n\n\t/**\n\t * Checks if uri contains the parameter.\n\t * @param {string} name\n\t * @return {boolean}\n\t */\n\thasParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.contains(name);\n\t}\n\n\t/**\n\t * Makes this URL unique by adding a random param to it. Useful for avoiding\n\t * cache.\n\t */\n\tmakeUnique() {\n\t\tthis.setParameterValue(Uri.RANDOM_PARAM, string.getRandomString());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Maybe adds protocol and a hostname placeholder on a parial URI if needed.\n\t * Relevent for compatibility with <code>URL</code> native object.\n\t * @param {string=} opt_uri\n\t * @return {string} URI with protocol and hostname placeholder.\n\t */\n\tmaybeAddProtocolAndHostname_(opt_uri) {\n\t\tvar url = opt_uri;\n\t\tif (opt_uri.indexOf('://') === -1 &&\n\t\t\topt_uri.indexOf('javascript:') !== 0) { // jshint ignore:line\n\n\t\t\turl = Uri.DEFAULT_PROTOCOL;\n\t\t\tif (opt_uri[0] !== '/' || opt_uri[1] !== '/') {\n\t\t\t\turl += '//';\n\t\t\t}\n\n\t\t\tswitch (opt_uri.charAt(0)) {\n\t\t\t\tcase '.':\n\t\t\t\tcase '?':\n\t\t\t\tcase '#':\n\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\turl += '/';\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '':\n\t\t\t\tcase '/':\n\t\t\t\t\tif (opt_uri[1] !== '/') {\n\t\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\t}\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\turl += opt_uri;\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Parses the given uri string into an object.\n\t * @param {*=} opt_uri Optional string URI to parse\n\t */\n\tstatic parse(opt_uri) {\n\t\treturn parseFn_(opt_uri);\n\t}\n\n\t/**\n\t * Removes the named query parameter.\n\t * @param {string} name The parameter to remove.\n\t * @chainable\n\t */\n\tremoveParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\tthis.query.remove(name);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes uniqueness parameter of the uri.\n\t * @chainable\n\t */\n\tremoveUnique() {\n\t\tthis.removeParameter(Uri.RANDOM_PARAM);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hash.\n\t * @param {string} hash\n\t * @chainable\n\t */\n\tsetHash(hash) {\n\t\tthis.url.hash = hash;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hostname.\n\t * @param {string} hostname\n\t * @chainable\n\t */\n\tsetHostname(hostname) {\n\t\tthis.url.hostname = hostname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValue(name, value) {\n\t\tthis.removeParameter(name);\n\t\tthis.addParameterValue(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the values of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValues(name, values) {\n\t\tthis.removeParameter(name);\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pathname.\n\t * @param {string} pathname\n\t * @chainable\n\t */\n\tsetPathname(pathname) {\n\t\tthis.url.pathname = pathname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the port number.\n\t * @param {*} port Port number.\n\t * @chainable\n\t */\n\tsetPort(port) {\n\t\tthis.url.port = port;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the function that will be used for parsing the original string uri\n\t * into an object.\n\t * @param {!function()} parseFn\n\t */\n\tstatic setParseFn(parseFn) {\n\t\tparseFn_ = parseFn;\n\t}\n\n\t/**\n\t * Sets the protocol. If missing <code>http:</code> is used as default.\n\t * @param {string} protocol\n\t * @chainable\n\t */\n\tsetProtocol(protocol) {\n\t\tthis.url.protocol = protocol;\n\t\tif (this.url.protocol[this.url.protocol.length - 1] !== ':') {\n\t\t\tthis.url.protocol += ':';\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @return {string} The string form of the url.\n\t * @override\n\t */\n\ttoString() {\n\t\tvar href = '';\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\thref += this.getProtocol() + '//';\n\t\t}\n\t\thref += host + this.getPathname() + this.getSearch() + this.getHash();\n\t\treturn href;\n\t}\n\n\t/**\n\t * Joins the given paths.\n\t * @param {string} basePath\n\t * @param {...string} ...paths Any number of paths to be joined with the base url.\n\t * @static\n\t */\n\tstatic joinPaths(basePath, ...paths) {\n\t\tif (basePath.charAt(basePath.length - 1) === '/') {\n\t\t\tbasePath = basePath.substring(0, basePath.length - 1);\n\t\t}\n\t\tpaths = paths.map(path => path.charAt(0) === '/' ? path.substring(1) : path);\n\t\treturn [basePath].concat(paths).join('/').replace(/\\/$/, '');\n\t}\n\n\t/**\n\t * URL-decodes the string. We need to specially handle '+'s because\n\t * the javascript library doesn't convert them to spaces.\n\t * @param {string} str The string to url decode.\n\t * @return {string} The decoded {@code str}.\n\t */\n\tstatic urlDecode(str) {\n\t\treturn decodeURIComponent(str.replace(/\\+/g, ' '));\n\t}\n\n}\n\n/**\n * Default protocol value.\n * @type {string}\n * @default http:\n * @static\n */\nconst isSecure = () =>\n\t(typeof window !== 'undefined' &&\n\t\twindow.location &&\n\t\twindow.location.protocol &&\n\t\twindow.location.protocol.indexOf('https') === 0);\n\nUri.DEFAULT_PROTOCOL = isSecure() ? 'https:' : 'http:';\n\n/**\n * Hostname placeholder. Relevant to internal usage only.\n * @type {string}\n * @static\n */\nUri.HOSTNAME_PLACEHOLDER = 'hostname' + Date.now();\n\n/**\n * Name used by the param generated by `makeUnique`.\n * @type {string}\n * @static\n */\nUri.RANDOM_PARAM = 'zx';\n\nexport default Uri;\n"],"sourceRoot":"/source/"}