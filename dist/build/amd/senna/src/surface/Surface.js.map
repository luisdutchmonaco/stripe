{"version":3,"sources":["Surface.js"],"names":["Surface","id","Error","activeChild","defaultChild","element","transitionFn","getChild","DEFAULT","maybeWrapContentAsDefault_","screenId","opt_content","child","createChild","transition","getElement","document","createElement","setAttribute","makeId_","getElementById","fragment","createDocumentFragment","firstChild","appendChild","addContent","from","to","thenAlways","defaultTransition","resolve","call","style","display","classList","remove","add"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAOMA,O;;;AAEL;;;;;;AAMA,mBAAYC,EAAZ,EAAgB;AAAA;;AAAA;;AAGf,OAAI,CAACA,EAAL,EAAS;AACR,UAAM,IAAIC,KAAJ,CAAU,0EAAV,CAAN;AACA;;AAED;;;;;;AAMA,SAAKC,WAAL,GAAmB,IAAnB;;AAEA;;;;;;AAMA,SAAKC,YAAL,GAAoB,IAApB;;AAEA;;;;;;;AAOA,SAAKC,OAAL,GAAe,IAAf;;AAEA;;;;;;AAMA,SAAKJ,EAAL,GAAUA,EAAV;;AAEA;;;;;;AAMA,SAAKK,YAAL,GAAoB,IAApB;;AAEA,SAAKF,YAAL,GAAoB,MAAKG,QAAL,CAAcP,QAAQQ,OAAtB,CAApB;AACA,SAAKC,0BAAL;AACA,SAAKN,WAAL,GAAmB,MAAKC,YAAxB;AAlDe;AAmDf;;AAED;;;;;;;;;;;;;;8BAUWM,Q,EAAUC,W,EAAa;AACjC,QAAIC,QAAQ,KAAKR,YAAjB;;AAEA,QAAI,4BAAgBO,WAAhB,CAAJ,EAAkC;AACjCC,aAAQ,KAAKL,QAAL,CAAcG,QAAd,CAAR;AACA,SAAIE,KAAJ,EAAW;AACV,+BAAeA,KAAf;AACA,MAFD,MAEO;AACNA,cAAQ,KAAKC,WAAL,CAAiBH,QAAjB,CAAR;AACA,WAAKI,UAAL,CAAgBF,KAAhB,EAAuB,IAAvB;AACA;AACD,sBAAOA,KAAP,EAAcD,WAAd;AACA;;AAED,QAAIN,UAAU,KAAKU,UAAL,EAAd;;AAEA,QAAIV,WAAWO,KAAf,EAAsB;AACrB,sBAAOP,OAAP,EAAgBO,KAAhB;AACA;;AAED,WAAOA,KAAP;AACA;;;+BAOWF,Q,EAAU;AACrB,QAAIE,QAAQ,kBAAQI,QAAR,CAAiBC,aAAjB,CAA+B,KAA/B,CAAZ;AACAL,UAAMM,YAAN,CAAmB,IAAnB,EAAyB,KAAKC,OAAL,CAAaT,QAAb,CAAzB;AACA,WAAOE,KAAP;AACA;;;4BAOQF,Q,EAAU;AAClB,WAAO,kBAAQM,QAAR,CAAiBI,cAAjB,CAAgC,KAAKD,OAAL,CAAaT,QAAb,CAAhC,CAAP;AACA;;;gCAQY;AACZ,QAAI,KAAKL,OAAT,EAAkB;AACjB,YAAO,KAAKA,OAAZ;AACA;AACD,SAAKA,OAAL,GAAe,kBAAQW,QAAR,CAAiBI,cAAjB,CAAgC,KAAKnB,EAArC,CAAf;AACA,WAAO,KAAKI,OAAZ;AACA;;;2BAMO;AACP,WAAO,KAAKJ,EAAZ;AACA;;;qCAOiB;AACjB,WAAO,KAAKK,YAAZ;AACA;;;2BAQOI,Q,EAAU;AACjB,WAAO,KAAKT,EAAL,GAAU,GAAV,GAAgBS,QAAvB;AACA;;;gDAQ4B;AAC5B,QAAIL,UAAU,KAAKU,UAAL,EAAd;AACA,QAAIV,WAAW,CAAC,KAAKD,YAArB,EAAmC;AAClC,SAAIiB,WAAW,kBAAQL,QAAR,CAAiBM,sBAAjB,EAAf;AACA,YAAOjB,QAAQkB,UAAf,EAA2B;AAC1BF,eAASG,WAAT,CAAqBnB,QAAQkB,UAA7B;AACA;AACD,UAAKnB,YAAL,GAAoB,KAAKqB,UAAL,CAAgBzB,QAAQQ,OAAxB,EAAiCa,QAAjC,CAApB;AACA,UAAKP,UAAL,CAAgB,IAAhB,EAAsB,KAAKV,YAA3B;AACA;AACD;;;yBAMKH,E,EAAI;AACT,SAAKA,EAAL,GAAUA,EAAV;AACA;;;mCAOeK,Y,EAAc;AAC7B,SAAKA,YAAL,GAAoBA,YAApB;AACA;;;wBAOII,Q,EAAU;AACd,QAAIgB,OAAO,KAAKvB,WAAhB;AACA,QAAIwB,KAAK,KAAKpB,QAAL,CAAcG,QAAd,CAAT;AACA,QAAI,CAACiB,EAAL,EAAS;AACRA,UAAK,KAAKvB,YAAV;AACA;AACD,SAAKD,WAAL,GAAmBwB,EAAnB;AACA,WAAO,KAAKb,UAAL,CAAgBY,IAAhB,EAAsBC,EAAtB,EAA0BC,UAA1B,CAAqC,YAAM;AACjD,SAAIF,QAAQA,SAASC,EAArB,EAAyB;AACxB,6BAAaD,IAAb;AACA;AACD,KAJM,CAAP;AAKA;;;0BAMMhB,Q,EAAU;AAChB,QAAIE,QAAQ,KAAKL,QAAL,CAAcG,QAAd,CAAZ;AACA,QAAIE,KAAJ,EAAW;AACV,4BAAaA,KAAb;AACA;AACD;;;8BAKU;AACV,WAAO,KAAKX,EAAZ;AACA;;;8BASUyB,I,EAAMC,E,EAAI;AACpB,QAAIrB,eAAe,KAAKA,YAAL,IAAqBN,QAAQ6B,iBAAhD;AACA,WAAO,kBAAmBC,OAAnB,CAA2BxB,aAAayB,IAAb,CAAkB,IAAlB,EAAwBL,IAAxB,EAA8BC,EAA9B,CAA3B,CAAP;AACA;;;;;;AAIF;;;;;;;;;;;;;;;;;;;AAmBA3B,SAAQQ,OAAR,GAAkB,SAAlB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBAR,SAAQ6B,iBAAR,GAA4B,UAASH,IAAT,EAAeC,EAAf,EAAmB;AAC9C,MAAID,IAAJ,EAAU;AACTA,QAAKM,KAAL,CAAWC,OAAX,GAAqB,MAArB;AACAP,QAAKQ,SAAL,CAAeC,MAAf,CAAsB,SAAtB;AACA;AACD,MAAIR,EAAJ,EAAQ;AACPA,MAAGK,KAAH,CAASC,OAAT,GAAmB,OAAnB;AACAN,MAAGO,SAAH,CAAaE,GAAb,CAAiB,SAAjB;AACA;AACD,EATD;;mBAWepC,O","file":"src/surface/Surface.js","sourcesContent":["'use strict';\n\nimport globals from '../globals/globals';\nimport { Disposable, isDefAndNotNull } from 'metal';\nimport { append, removeChildren, exitDocument } from 'metal-dom';\nimport CancellablePromise from 'metal-promise';\n\nclass Surface extends Disposable {\n\n\t/**\n\t * Surface class representing the references to elements on the page that\n\t * can potentially be updated by <code>App</code>.\n\t * @param {string} id\n\t * @constructor\n\t */\n\tconstructor(id) {\n\t\tsuper();\n\n\t\tif (!id) {\n\t\t\tthrow new Error('Surface element id not specified. A surface element requires a valid id.');\n\t\t}\n\n\t\t/**\n\t\t * Holds the active child element.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.activeChild = null;\n\n\t\t/**\n\t\t * Holds the default child element.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.defaultChild = null;\n\n\t\t/**\n\t\t * Holds the element with the specified surface id, if not found creates a\n\t\t * new element with the specified id.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.element = null;\n\n\t\t/**\n\t\t * Holds the surface id.\n\t\t * @type {String}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.id = id;\n\n\t\t/**\n\t\t * Holds the default transitionFn for the surfaces.\n\t\t * @param {?Element=} from The visible surface element.\n\t\t * @param {?Element=} to The surface element to be flipped.\n\t\t * @default null\n\t\t */\n\t\tthis.transitionFn = null;\n\n\t\tthis.defaultChild = this.getChild(Surface.DEFAULT);\n\t\tthis.maybeWrapContentAsDefault_();\n\t\tthis.activeChild = this.defaultChild;\n\t}\n\n\t/**\n\t * Adds screen content to a surface. If content hasn't been passed, see if\n\t * an element exists in the DOM that matches the id. By convention, the\n\t * element should already be nested in the right element and should have an\n\t * id that is a concatentation of the surface id + '-' + the screen id.\n\t * @param {!string} screenId The screen id the content belongs too.\n\t * @param {?string|Element=} opt_content The string content or element to\n\t *     add be added as surface content.\n\t * @return {Element}\n\t */\n\taddContent(screenId, opt_content) {\n\t\tvar child = this.defaultChild;\n\n\t\tif (isDefAndNotNull(opt_content)) {\n\t\t\tchild = this.getChild(screenId);\n\t\t\tif (child) {\n\t\t\t\tremoveChildren(child);\n\t\t\t} else {\n\t\t\t\tchild = this.createChild(screenId);\n\t\t\t\tthis.transition(child, null);\n\t\t\t}\n\t\t\tappend(child, opt_content);\n\t\t}\n\n\t\tvar element = this.getElement();\n\n\t\tif (element && child) {\n\t\t\tappend(element, child);\n\t\t}\n\n\t\treturn child;\n\t}\n\n\t/**\n\t * Creates child node for the surface.\n\t * @param {!string} screenId The screen id.\n\t * @return {Element}\n\t */\n\tcreateChild(screenId) {\n\t\tvar child = globals.document.createElement('div');\n\t\tchild.setAttribute('id', this.makeId_(screenId));\n\t\treturn child;\n\t}\n\n\t/**\n\t * Gets child node of the surface.\n\t * @param {!string} screenId The screen id.\n\t * @return {?Element}\n\t */\n\tgetChild(screenId) {\n\t\treturn globals.document.getElementById(this.makeId_(screenId));\n\t}\n\n\t/**\n\t * Gets the surface element from element, and sets it to the el property of\n\t * the current instance.\n\t * <code>this.element</code> will be used.\n\t * @return {?Element} The current surface element.\n\t */\n\tgetElement() {\n\t\tif (this.element) {\n\t\t\treturn this.element;\n\t\t}\n\t\tthis.element = globals.document.getElementById(this.id);\n\t\treturn this.element;\n\t}\n\n\t/**\n\t * Gets the surface id.\n\t * @return {String}\n\t */\n\tgetId() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Gets the surface transition function.\n\t * See <code>Surface.defaultTransition</code>.\n\t * @return {?Function=} The transition function.\n\t */\n\tgetTransitionFn() {\n\t\treturn this.transitionFn;\n\t}\n\n\t/**\n\t * Makes the id for the element that holds content for a screen.\n\t * @param {!string} screenId The screen id the content belongs too.\n\t * @return {String}\n\t * @private\n\t */\n\tmakeId_(screenId) {\n\t\treturn this.id + '-' + screenId;\n\t}\n\n\t/**\n\t * If default child is missing, wraps surface content as default child. If\n\t * surface have static content, make sure to place a\n\t * <code>surfaceId-default</code> element inside surface, only contents\n\t * inside the default child will be replaced by navigation.\n\t */\n\tmaybeWrapContentAsDefault_() {\n\t\tvar element = this.getElement();\n\t\tif (element && !this.defaultChild) {\n\t\t\tvar fragment = globals.document.createDocumentFragment();\n\t\t\twhile (element.firstChild) {\n\t\t\t\tfragment.appendChild(element.firstChild);\n\t\t\t}\n\t\t\tthis.defaultChild = this.addContent(Surface.DEFAULT, fragment);\n\t\t\tthis.transition(null, this.defaultChild);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the surface id.\n\t * @param {!string} id\n\t */\n\tsetId(id) {\n\t\tthis.id = id;\n\t}\n\n\t/**\n\t * Sets the surface transition function.\n\t * See <code>Surface.defaultTransition</code>.\n\t * @param {?Function=} transitionFn The transition function.\n\t */\n\tsetTransitionFn(transitionFn) {\n\t\tthis.transitionFn = transitionFn;\n\t}\n\n\t/**\n\t * Shows screen content from a surface.\n\t * @param {String} screenId The screen id to show.\n\t * @return {CancellablePromise} Pauses the navigation until it is resolved.\n\t */\n\tshow(screenId) {\n\t\tvar from = this.activeChild;\n\t\tvar to = this.getChild(screenId);\n\t\tif (!to) {\n\t\t\tto = this.defaultChild;\n\t\t}\n\t\tthis.activeChild = to;\n\t\treturn this.transition(from, to).thenAlways(() => {\n\t\t\tif (from && from !== to) {\n\t\t\t\texitDocument(from);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Removes screen content from a surface.\n\t * @param {!string} screenId The screen id to remove.\n\t */\n\tremove(screenId) {\n\t\tvar child = this.getChild(screenId);\n\t\tif (child) {\n\t\t\texitDocument(child);\n\t\t}\n\t}\n\n\t/**\n\t * @return {String}\n\t */\n\ttoString() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Invokes the transition function specified on <code>transition</code> attribute.\n\t * @param {?Element=} from\n\t * @param {?Element=} to\n\t * @return {?CancellablePromise=} This can return a promise, which will pause the\n\t *     navigation until it is resolved.\n\t */\n\ttransition(from, to) {\n\t\tvar transitionFn = this.transitionFn || Surface.defaultTransition;\n\t\treturn CancellablePromise.resolve(transitionFn.call(this, from, to));\n\t}\n\n}\n\n/**\n   * Holds the default surface name. Elements on the page must contain a child\n   * element containing the default content, this element must be as following:\n   *\n   * Example:\n   * <code>\n   *   <div id=\"mysurface\">\n   *     <div id=\"mysurface-default\">Default surface content.</div>\n   *   </div>\n   * </code>\n   *\n   * The default content is relevant for the initial page content. When a\n   * screen doesn't provide content for the surface the default content is\n   * restored into the page.\n   *\n   * @type {!String}\n   * @default default\n   * @static\n   */\nSurface.DEFAULT = 'default';\n\n/**\n * Holds the default transition for all surfaces. Each surface could have its\n * own transition.\n *\n * Example:\n *\n * <code>\n * surface.setTransitionFn(function(from, to) {\n *   if (from) {\n *     from.style.display = 'none';\n *     from.classList.remove('flipped');\n *   }\n *   if (to) {\n *     to.style.display = 'block';\n *     to.classList.add('flipped');\n *   }\n *   return null;\n * });\n * </code>\n *\n * @param {?Element=} from The visible surface element.\n * @param {?Element=} to The surface element to be flipped.\n * @static\n */\nSurface.defaultTransition = function(from, to) {\n\tif (from) {\n\t\tfrom.style.display = 'none';\n\t\tfrom.classList.remove('flipped');\n\t}\n\tif (to) {\n\t\tto.style.display = 'block';\n\t\tto.classList.add('flipped');\n\t}\n};\n\nexport default Surface;\n"],"sourceRoot":"/source/"}